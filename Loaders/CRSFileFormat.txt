crs file format v1.1:
A crs file contains metadata about the scene and a multitude of nodes, detailing the objects in the scene.
The file always start with a 100 bytes header, which can generally be skipped. 
The actual scene starts with a camera node, after which one light node follows.
After this are 4 bytes, representing a 32-bit integer, showing the model count.
After this follow the model nodes, the amount specified by the aforementioned 32-bit integer.
Each model node contains atleast one submodel, although there can be more.
After the model nodes is a skybox node.

Camera node:
12 bytes - position : vector3
4  bytes - pitch	: float
4  bytes - yaw		: float

The pitch and yaw are both used in degrees. These can be used to calculate the front, right and up of the camera.

Light node:
12 bytes - psoition	: vector3

Model node:
The structure of a model node looks like this:

10 bytes - model name		   : UTF8 string
12 bytes - position			   : vector3
12 bytes - scaling			   : vector3
12 bytes - rotation			   : vector3
4  bytes - amount of submodels : 32-bit integer
.. bytes - submodel nodes	   : node

Models are used as a container for the submodels: it keeps them organized together.
The amount of submodels is stated by the 4 bytes named "amount of submodels" here.
Vector3's are 3 float values resembling the x, y and z axis.
There isn't any information regarding the center and extents of the models, those have to be calculated manually.


Submodel node:
The structure of a submodel node looks like this:

10 bytes - model name		  : UTF8 string
12 bytes - position			  : vector3
12 bytes - scaling			  : vector3
12 bytes - rotation			  : vector3
1  byte  - has material		  : bool
1  byte  - has bone(s)		  : bool
4  bytes - amount of polygons : 32-bit integer
.. bytes - all vertices		  : float
.. bytes - material node	  : node

the amount of vertices can be calculated with amount of polygons * 3 * (8 + has bones(s) ? 16 : 0) * 4. 
Each polygon has 3 vertices, where each contains 8 or 24 values, depending on the attached bones.
The bool "has material" states if a submodel has a material attached or if it should use the engines default textures.
The material node is not present if "has material" is false.
If materials are attached, they are stated after "all vertices".
If the mesh has bones attached, has bone(s) is true.
This bool is added to reduce file size for models that dont have bones applied.
A vertex is defined as follows:

Vector3 position (12 bytes)
	x
	y
	z
Vector2 UV-coordinates (8 bytes)
	x
	y
Vector3 normal (12 bytes)
	x
	y
	z
if has bone(s) is true:
32-bit integer array (length 8) attached bone IDs (32 bytes)
float array (length 8) weight of the bone, whose ID is at the index in bone IDs as this float (32 bytes)

This means that one vertex takes up 32 bytes (8 floats). One polygon always consists of 3 vertices, so the vertex count is calculated with amount of polygons * 3 * 8.
multiply this with 4 bytes and you get the total byte size of the mesh.


Material node:
The structure of a material is as following:

10 bytes - material name  : UTF8 string
.. bytes - albedo node    : node
.. bytes - normal node    : node
.. bytes - metallic node  : node
.. bytes - roughness node : node
.. bytes - AO node		  : node
.. bytes - height node    : node

albedo / normal / metallic / roughness / AO / height node:
The structure of a specular node is as following:

1  byte - isDefault : bool
4  bytes - length   : 32-bit integer
.. bytes - image data

The image data is a dump of the .png or .jpg file content, it must be put through a .png reader before using.
if "isDefault" it means that it relies on the engines default texture and no data about this node will follow after.

Skybox node:
1  byte - exists : bool
if exists is true:
4  btyes - length of raw contents : 32-bit integer
.. bytes - raw .hdr file contents

The image data is a dump of the .hdr file content, it must be put through a .hdr reader before using.